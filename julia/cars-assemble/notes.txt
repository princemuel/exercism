# Original implementation
function success_rate_original(speed)
    if speed < 1
        return 0.0
    elseif speed < 5
        return 1.0
    elseif speed < 9
        return 0.9
    elseif speed < 10
        return 0.8
    else
        return 0.77
    end
end

# 1. Ternary operator chain (compact but less readable)
function success_rate_ternary(speed)
    speed < 1 ? 0.0 :
    speed < 5 ? 1.0 :
    speed < 9 ? 0.9 :
    speed < 10 ? 0.8 : 0.77
end

# 2. Dictionary lookup with findlast
function success_rate_dict(speed)
    rates = Dict(0 => 0.0, 1 => 1.0, 5 => 0.9, 9 => 0.8, 10 => 0.77)
    thresholds = [0, 1, 5, 9, 10]
    idx = findlast(t -> speed >= t, thresholds)
    return rates[thresholds[idx]]
end

# 3. Array-based lookup with searchsortedlast
function success_rate_array(speed)
    thresholds = [0, 1, 5, 9, 10]
    rates = [0.0, 1.0, 0.9, 0.8, 0.77]
    idx = searchsortedlast(thresholds, speed)
    return idx == 0 ? 0.0 : rates[idx]
end

# 4. Mathematical formula approach (if pattern exists)
function success_rate_formula(speed)
    if speed < 1
        return 0.0
    elseif speed < 5
        return 1.0
    else
        # This approximates the step function, though not exact
        return max(0.77, 1.0 - 0.03 * (speed - 4))
    end
end

# 5. Pattern matching style with multiple dispatch
abstract type SpeedRange end
struct LowSpeed <: SpeedRange end      # < 1
struct NormalSpeed <: SpeedRange end   # 1-4
struct MediumSpeed <: SpeedRange end   # 5-8
struct HighSpeed <: SpeedRange end     # 9
struct MaxSpeed <: SpeedRange end      # >= 10

classify_speed(speed) =
    speed < 1 ? LowSpeed() :
    speed < 5 ? NormalSpeed() :
    speed < 9 ? MediumSpeed() :
    speed < 10 ? HighSpeed() : MaxSpeed()

success_rate_dispatch(speed) = get_rate(classify_speed(speed))

get_rate(::LowSpeed) = 0.0
get_rate(::NormalSpeed) = 1.0
get_rate(::MediumSpeed) = 0.9
get_rate(::HighSpeed) = 0.8
get_rate(::MaxSpeed) = 0.77

# 6. Functional approach with closures
function create_success_rate_function()
    rules = [
        (speed -> speed < 1, 0.0),
        (speed -> speed < 5, 1.0),
        (speed -> speed < 9, 0.9),
        (speed -> speed < 10, 0.8),
        (speed -> true, 0.77)  # default case
    ]

    return function(speed)
        for (condition, rate) in rules
            if condition(speed)
                return rate
            end
        end
    end
end

success_rate_functional = create_success_rate_function()

# 7. Macro-generated switch (compile-time optimization)
macro switch_success_rate(speed_expr)
    quote
        local speed = $(esc(speed_expr))
        if speed < 1
            0.0
        elseif speed < 5
            1.0
        elseif speed < 9
            0.9
        elseif speed < 10
            0.8
        else
            0.77
        end
    end
end

success_rate_macro(speed) = @switch_success_rate(speed)

# 8. Interpolation-based approach (for smooth transitions)
function success_rate_interpolated(speed)
    if speed < 1
        return 0.0
    end

    # Define control points
    points = [(1, 1.0), (5, 0.9), (9, 0.8), (10, 0.77)]

    # Find bracketing points
    for i in 1:length(points)-1
        x1, y1 = points[i]
        x2, y2 = points[i+1]
        if speed >= x1 && speed <= x2
            # Linear interpolation
            t = (speed - x1) / (x2 - x1)
            return y1 + t * (y2 - y1)
        end
    end

    return 0.77  # For speeds > 10
end

# 9. Bit manipulation approach (if speed is always integer)
function success_rate_bitwise(speed::Int)
    # Using bit patterns for range checking
    rate_bits = UInt64(0)
    rate_bits |= (speed >= 1) << 0   # bit 0: >= 1
    rate_bits |= (speed >= 5) << 1   # bit 1: >= 5
    rate_bits |= (speed >= 9) << 2   # bit 2: >= 9
    rate_bits |= (speed >= 10) << 3  # bit 3: >= 10

    return [0.0, 1.0, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 0.77][rate_bits + 1]
end

# 10. State machine approach
mutable struct SuccessRateCalculator
    current_rate::Float64

    function SuccessRateCalculator()
        new(0.0)
    end
end

function calculate_rate!(calc::SuccessRateCalculator, speed)
    if speed < 1
        calc.current_rate = 0.0
    elseif speed < 5
        calc.current_rate = 1.0
    elseif speed < 9
        calc.current_rate = 0.9
    elseif speed < 10
        calc.current_rate = 0.8
    else
        calc.current_rate = 0.77
    end
    return calc.current_rate
end

# Usage example and benchmarking setup
function test_all_implementations()
    test_speeds = [0, 1, 3, 5, 7, 9, 10, 15]

    println("Testing all implementations:")
    for speed in test_speeds
        println("Speed $speed:")
        println("  Original: $(success_rate_original(speed))")
        println("  Ternary: $(success_rate_ternary(speed))")
        println("  Dict: $(success_rate_dict(speed))")
        println("  Array: $(success_rate_array(speed))")
        println("  Dispatch: $(success_rate_dispatch(speed))")
        println("  Functional: $(success_rate_functional(speed))")
        println("  Macro: $(success_rate_macro(speed))")
        println("  Interpolated: $(success_rate_interpolated(speed))")
        if isa(speed, Int)
            println("  Bitwise: $(success_rate_bitwise(speed))")
        end

        calc = SuccessRateCalculator()
        println("  State machine: $(calculate_rate!(calc, speed))")
        println()
    end
end
