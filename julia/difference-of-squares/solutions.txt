Approach: using the analytical formulas and evalpoly

n111b111's solution uses evalpoly, which generates efficient code for the three polynomial expressions using Horner's method.

"Square the sum of the numbers up to the given number"
square_of_sum(n::Int) = evalpoly(n, (0,0,1,2,1)) รท 4

"Sum the squares of the numbers up to the given number"
sum_of_squares(n::Int) = evalpoly(n, (0,1,3,2)) รท 6

"Subtract sum of squares from square of sums"
difference(n::Int) = evalpoly(n, (0,-2,-3,2,3)) รท 12


Approach: using the square pyramidal number formula

"Square the sum of the first `n` positive integers"
square_of_sum(n) = sum(1:n)^2

"Sum the squares of the first `n` positive integers"
sum_of_squares(n) = n * (n + 1) * (2n + 1) รท 6

"Subtract the sum of squares from square of the sum of the first `n` positive ints"
difference(n) = square_of_sum(n) - sum_of_squares(n)


Approach: using sum

square_of_sum(n) = sum(1:n)^2

# 0:n because otherwise the case where n = 0 would be reducing over an empty collection.
sum_of_squares(n) = sum(x -> x^2, 0:n)

difference(n) = square_of_sum(n) - sum_of_squares(n)
