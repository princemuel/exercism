pub fn egg_count(n: u32) -> usize {
    n.count_ones().try_into().unwrap()
}

pub fn egg_count(n: u32) -> usize {
    // let binary = format!("{:b}", n);
    decimal_to_binary(n).chars().filter(|c| *c == '1').count()
}

pub fn decimal_to_binary(n: u32) -> String {
    (0..32)
        .rev()
        .map(|i| (n >> i) & 1)
        .skip_while(|&bit| bit == 0)
        .map(|bit| if bit == 1 { '1' } else { '0' })
        .collect()
}


pub fn egg_count(n: u32) -> u32 {
    let mut count = 0;
    let mut x = n;

    while x > 0 {
        count += x % 2;
        x /= 2;
    }

    count
}

pub fn egg_count(display_value: u32) -> u32 {
    let mut count = 0;
    let mut n = display_value;

    while n > 0 {
        count += n & 1;
        n >>= 1;
    }

    count
}

pub fn egg_count(display_value: u32) -> u32 {
    let mut n = display_value;
    let mut count = 0;
    while n != 0 {
        count += 1;
        n &= n - 1;
    }
    count
}
