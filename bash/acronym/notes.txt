#!/usr/bin/env bash

words=${1//-/ }
words=${words//[[:punct:]]/}

for word in $words; do
    acronym+=${word:0:1}
done

echo "${acronym^^}"


#!/bin/bash

NAME=$1

echo "$1" | tr -d "'" | tr -c 'a-zA-Z' '\n' | cut -c1 | tr 'a-z' 'A-Z' | tr -d '\n'


#!/usr/bin/env bash

STR="${1^^}"
STR="${STR//-/ }"
STR="${STR//[^A-Z\ ]/}"
printf "%c" $STR


#!/usr/bin/env bash

STR=$(echo "${1^^}" | sed 's/-/\ /g' | sed 's/[^A-Z\ ]//g')
echo $( set -f; printf "%c" $STR )


#!/usr/bin/env bash

echo "$1" | sed -E "s/([^a-zA-Z]+|^)([a-zA-Z])[a-zA-Z']*/\2/g" | tr '[:lower:]' '[:upper:]'


#!/usr/bin/env bash

set -o errexit
set -o nounset

main() {
    local line="$1"
    IFS=' -_*' read -r -a words <<< "$line"

    local output=""
    local word
    for word in "${words[@]}"; do
        local letter="${word:0:1}"
        output+="${letter^^}"
    done

    echo "$output"
}

main "$@"



#!/usr/bin/env bash

usage() {
  echo "Usage: $(basename "$0") <string to acronymize>"
  exit 1
}

main() {
  # Iterate through the input string.
  # When we encounter the beginning of a word,
  # store it in the accumulator.
  # We are at the beginning of a word
  # when the character prior to the cursor is a non-word.
  # Prime the input by adding a space at the beginning
  # to make sure we find the first word.

  input=" ${@^^}"
  acc=""
  word_pattern="[A-Z']"

  for (( curr=1; curr < ${#input}; curr++ )); do
    curr_char="${input:curr:1}"
    prev_char="${input:curr-1:1}"

    if [[ "$curr_char" = $word_pattern ]] && [[ "$prev_char" != $word_pattern ]]; then
      acc+=$curr_char
    fi
  done

  echo "$acc"
}

if (($# < 1)); then
  usage
fi

main "$@"
