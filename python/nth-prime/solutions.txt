def prime(number):
    if number == 0:
        raise ValueError('there is no zeroth prime')
    counter = 2
    primes = [2]
    while len(primes) < number:
        counter += 1
        if all(counter % test != 0 for test in primes):
            primes.append(counter)
    return primes[-1]

def prime(number):
    if number == 0:
        raise ValueError('there is no zeroth prime')
    counter = 2
    prime_count = 0
    while True:
        isprime = True
        for test in range(2, int(counter ** 0.5) + 1):
            if counter % test == 0:
                isprime = False
                break
        if isprime:
            prime_count += 1
        if prime_count == number:
            return counter
        counter += 1

def prime(number):
    if number == 0:
        raise ValueError('there is no zeroth prime')
    counter = 2
    prime_count = 0
    while True:
        isprime = True
        for test in range(2, int(counter ** 0.5) + 1):
            if counter % test == 0:
                break
        else:
            prime_count += 1
        if prime_count == number:
            return counter
        counter += 1

from itertools import islice, count

def is_prime(n):
    return not any(n % k == 0 for k in range(2, int(n ** 0.5) + 1))

def prime(number):
    if number == 0:
        raise ValueError('there is no zeroth prime')
    gen = islice(filter(is_prime, count(2)), number)
    for _ in range(number - 1): next(gen)
    return next(gen)

from itertools import islice, count

def prime(number):
    if number == 0:
        raise ValueError('there is no zeroth prime')
    gen = islice(filter(lambda counter: all(counter % test != 0 for test in range(2, int(counter ** 0.5) + 1)), count(2)), number)
    for _ in range(number - 1): next(gen)
    return next(gen)


from itertools import count, islice


def prime(number):
    if number == 0:
        raise ValueError("there is no zeroth prime")
    gen = islice(
        filter(
            lambda counter: all(
                counter % test != 0 for test in range(2, int(counter**0.5) + 1)
            ),
            count(2),
        ),
        number,
    )
    for _ in range(number - 1):
        next(gen)
    return next(gen)


from functools import cache
from itertools import count, islice


@cache
def is_prime(counter):
    return all(counter % test != 0 for test in range(2, int(counter**0.5) + 1))


def prime(number):
    if number == 0:
        raise ValueError("there is no zeroth prime")
    gen = islice(filter(is_prime, count(2)), number)
    for _ in range(number - 1):
        next(gen)
    return next(gen)
