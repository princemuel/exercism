def is_paired(input_string: str):
    stack = []
    bracket_pairs = {")": "(", "}": "{", "]": "["}

    for char in input_string:
        if char in bracket_pairs.values():
            stack.append(char)
        elif char in bracket_pairs.keys():
            if not stack or stack.pop() != bracket_pairs[char]:
                return False
    return len(stack) == 0

def is_paired(input_string: str):
    stack = []
    bracket_pairs = {")": "(", "}": "{", "]": "["}

    for char in input_string:
        if char in bracket_pairs.values():
            stack.append(char)
        elif char in bracket_pairs.keys():
            if not stack or stack.pop() != bracket_pairs[char]:
                return False
    return not stack

import re

def is_paired(input_string: str):
    brackets, has_pair = re.sub(r"[^{}[\]()]", "", input_string), 1

    while has_pair:
        brackets, has_pair = re.subn(r"{}|\[]|\(\)", "", brackets)

    return not brackets

import re

def is_paired(text: str) -> bool:
    text = re.sub(r'[^{}\[\]()]', '', text)
    while text != (text := re.sub(r'{\}|\[]|\(\)', '', text)):
        continue
    return not bool(text)

def is_paired(input_string: str):
    brackets = "".join(char for char in input_string if char in "{}[]()")
    while pair := next(
        (pair for pair in ("{}", "[]", "()") if pair in brackets), False
    ):
        brackets = brackets.replace(pair, "")
    return not brackets

def is_paired(input_string: str):
    text = "".join(item for item in input_string if item in "()[]{}")
    while "()" in text or "[]" in text or "{}" in text:
        text = text.replace("()","").replace("[]", "").replace("{}","")
    return not text
