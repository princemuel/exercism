defmodule Secrets do
  def secret_add(secret), do: &(&1 + secret |> trunc())

  def secret_subtract(secret), do: &(&1 - secret |> trunc() )

  def secret_multiply(secret), do: &(&1 * secret |> trunc())

  def secret_divide(secret), do: &(&1 / secret |> trunc())

  def secret_and(secret), do: &(Bitwise.band(&1, secret) |> trunc())

  def secret_xor(secret), do: &(Bitwise.bxor(&1, secret) |> trunc())

  def secret_combine(secret_function1, secret_function2), do: &(&1 |> secret_function1.() |> secret_function2.() |> trunc())
end

defmodule Secrets do
  def secret_add(secret), do: fn x -> x + secret end

  def secret_subtract(secret), do: fn x -> x - secret end

  def secret_multiply(secret), do: fn x -> x * secret end

  def secret_divide(secret), do: fn x -> div(x, secret) end

  def secret_and(secret), do: fn x -> Bitwise.band(x, secret) end

  def secret_xor(secret), do: fn x -> Bitwise.bxor(x, secret) end

  def secret_combine(secret_function1, secret_function2) do
    fn x -> secret_function2.(secret_function1.(x)) end
  end
end

defmodule Secrets do
  def secret_add(secret), do: fn a -> a + secret end
  def secret_subtract(secret), do: fn a -> a - secret end
  def secret_multiply(secret), do: fn a -> a * secret end
  def secret_divide(secret), do: fn a -> Kernel.div a, secret end
  def secret_and(secret), do: fn a -> Bitwise.&&& a, secret end
  def secret_xor(secret), do: fn a -> Bitwise.^^^ a, secret end
  def secret_combine(secret_function1, secret_function2), do: fn a -> a |> secret_function1.() |> secret_function2.() end
end

defmodule Secrets do
  def secret_add(secret), do: &(&1 + secret)

  def secret_subtract(secret), do: &Kernel.-(&1, secret)

  def secret_multiply(secret), do: &(&1 * secret)

  def secret_divide(secret), do: &div(&1, secret)

  def secret_and(secret), do: &Bitwise.band(&1, secret)

  def secret_xor(secret), do: &Bitwise.bxor(&1, secret)

  def secret_combine(secret_function1, secret_function2), do: &(&1 |> then(secret_function1) |> then(secret_function2))

end

defmodule Secrets do
  def secret_add(secret), do: &(&1 + secret)
  def secret_subtract(secret), do: &(&1 - secret)
  def secret_multiply(secret), do: &(&1 * secret)
  def secret_divide(secret), do: fn m -> trunc(m / secret) end
  def secret_and(secret), do: fn n -> Bitwise.band(secret, n) end
  def secret_xor(secret), do: fn n -> Bitwise.bxor(secret, n) end
  def secret_combine(secret_function1, secret_function2), do: fn n -> n |> secret_function1.() |> secret_function2.() end

end
